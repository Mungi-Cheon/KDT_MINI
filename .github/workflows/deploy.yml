name: CD

on:
  push:
    branches: [ "release" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }} .

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME}}
          password: ${{ secrets.DOCKER_HUB_TOKEN}}

      # DockerHub push
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

  deploy:

    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Delete .env, docker-compose, git_private_key
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            cd /home/app/
            rm -f .env
            rm -f docker-compose.yml

      - name: set environment variables
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            echo "DB_URL=${{secrets.DB_URL}}" >> /home/app/.env
            echo "DB_USERNAME=${{secrets.DB_USERNAME}}" >> /home/app/.env
            echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> /home/app/.env
            echo "MAIL_USERNAME=${{secrets.MAIL_USERNAME}}" >> /home/app/.env
            echo "MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}}" >> /home/app/.env
            echo "REDIS_HOST=${{secrets.REDIS_HOST}}" >> /home/app/.env
            echo "REDIS_PORT=${{secrets.REDIS_PORT}}" >> /home/app/.env
            echo "GOOGLE_REDIRECT_URI=${{secrets.GOOGLE_REDIRECT_URI}}" >> /home/app/.env
            echo "GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}" >> /home/app/.env
            echo "GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}" >> /home/app/.env
            echo "JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}}" >> /home/app/.env
            echo "JWT_ISSUER=${{secrets.JWT_ISSUER}}" >> /home/app/.env
            echo "JWT_ACCESS_TOKEN_EXPIRED_TIME=${{secrets.JWT_ACCESS_TOKEN_EXPIRED_TIME}}" >> /home/app/.env
            echo "JWT_REFRESH_TOKEN_EXPIRED_TIME=${{secrets.JWT_REFRESH_TOKEN_EXPIRED_TIME}}" >> /home/app/.env
            echo "KAKAO_REST_API_KEY=${{secrets.KAKAO_REST_API_KEY}}" >> /home/app/.env

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          source: "./docker-compose.yml"
          target: "/home"

      - name: Deploy application with Docker Compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            cd /home/app/
            docker-compose down
            docker-compose pull
            docker-compose up -d